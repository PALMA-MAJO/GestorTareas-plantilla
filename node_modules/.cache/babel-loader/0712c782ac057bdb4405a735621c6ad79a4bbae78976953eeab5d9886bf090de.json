{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      newTask: '',\n      // Para la nueva tarea que se agregar치\n      tasks: [] // Lista de tareas desde la API\n    };\n  },\n  created() {\n    this.fetchTasks(); // Cargar tareas al crear el componente\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        // Simulaci칩n de una llamada a la API para obtener las tareas\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos'); // Ejemplo de URL\n        const data = await response.json();\n        this.tasks = data.slice(0, 10); // Cargar solo las primeras 10 tareas\n      } catch (error) {\n        console.error('Error al cargar las tareas:', error);\n      }\n    },\n    addTask() {\n      if (this.newTask.trim() === '') return;\n      this.tasks.push({\n        id: Date.now(),\n        title: this.newTask,\n        completed: false\n      });\n      this.newTask = ''; // Limpiar el campo de entrada\n    },\n    toggleTask(task) {\n      task.completed = !task.completed; // Marcar como completada o incompleta\n    },\n    deleteTask(id) {\n      this.tasks = this.tasks.filter(task => task.id !== id); // Eliminar la tarea por ID\n    }\n  }\n};","map":{"version":3,"names":["data","newTask","tasks","created","fetchTasks","methods","response","fetch","json","slice","error","console","addTask","trim","push","id","Date","now","title","completed","toggleTask","task","deleteTask","filter"],"sources":["src/views/CombinedView.vue"],"sourcesContent":["<template>\r\n    <div class=\"task-container\">\r\n        <h1>Lista de Tareas</h1>\r\n        \r\n        <!-- Formulario para agregar nuevas tareas -->\r\n        <div class=\"add-task\">\r\n            <input type=\"text\" v-model=\"newTask\" placeholder=\"Escribe una nueva tarea\" />\r\n            <button @click=\"addTask\">Agregar Tarea</button>\r\n        </div>\r\n\r\n        <!-- Lista de tareas -->\r\n        <ul class=\"task-list\">\r\n            <li v-for=\"task in tasks\" :key=\"task.id\" :class=\"{ completed: task.completed }\">\r\n                <span @click=\"toggleTask(task)\">{{ task.title }}</span>\r\n                <button @click=\"deleteTask(task.id)\">Eliminar</button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            newTask: '',  // Para la nueva tarea que se agregar치\r\n            tasks: []     // Lista de tareas desde la API\r\n        };\r\n    },\r\n    created() {\r\n        this.fetchTasks(); // Cargar tareas al crear el componente\r\n    },\r\n    methods: {\r\n        async fetchTasks() {\r\n            try {\r\n                // Simulaci칩n de una llamada a la API para obtener las tareas\r\n                const response = await fetch('https://jsonplaceholder.typicode.com/todos'); // Ejemplo de URL\r\n                const data = await response.json();\r\n                this.tasks = data.slice(0, 10); // Cargar solo las primeras 10 tareas\r\n            } catch (error) {\r\n                console.error('Error al cargar las tareas:', error);\r\n            }\r\n        },\r\n        addTask() {\r\n            if (this.newTask.trim() === '') return;\r\n            this.tasks.push({ id: Date.now(), title: this.newTask, completed: false });\r\n            this.newTask = ''; // Limpiar el campo de entrada\r\n        },\r\n        toggleTask(task) {\r\n            task.completed = !task.completed; // Marcar como completada o incompleta\r\n        },\r\n        deleteTask(id) {\r\n            this.tasks = this.tasks.filter(task => task.id !== id); // Eliminar la tarea por ID\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.task-container {\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n}\r\n\r\n.add-task {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.add-task input {\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    margin-right: 5px;\r\n}\r\n\r\n.add-task button {\r\n    padding: 8px 12px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n}\r\n\r\n.task-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.task-list li {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n.task-list li.completed span {\r\n    text-decoration: line-through;\r\n    color: gray;\r\n}\r\n</style>\r\n"],"mappings":";AAqBA;EACAA,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA,MAAAD,WAAA;MACA;QACA;QACA,MAAAE,QAAA,SAAAC,KAAA;QACA,MAAAP,IAAA,SAAAM,QAAA,CAAAE,IAAA;QACA,KAAAN,KAAA,GAAAF,IAAA,CAAAS,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,gCAAAA,KAAA;MACA;IACA;IACAE,QAAA;MACA,SAAAX,OAAA,CAAAY,IAAA;MACA,KAAAX,KAAA,CAAAY,IAAA;QAAAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;QAAAC,KAAA,OAAAjB,OAAA;QAAAkB,SAAA;MAAA;MACA,KAAAlB,OAAA;IACA;IACAmB,WAAAC,IAAA;MACAA,IAAA,CAAAF,SAAA,IAAAE,IAAA,CAAAF,SAAA;IACA;IACAG,WAAAP,EAAA;MACA,KAAAb,KAAA,QAAAA,KAAA,CAAAqB,MAAA,CAAAF,IAAA,IAAAA,IAAA,CAAAN,EAAA,KAAAA,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}